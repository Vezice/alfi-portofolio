{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"17p5Gw1T529wRiryj4VWc8Z0NXWN6EI_E","timestamp":1636897014443}],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"jvonXDMsQP1k"},"source":["# Backpropagation 2 : Classification"]},{"cell_type":"markdown","metadata":{"id":"sHySaU_QQPg1"},"source":["## Functions"]},{"cell_type":"code","metadata":{"id":"yBAq-VWHsYz8","executionInfo":{"status":"ok","timestamp":1707265883946,"user_tz":-420,"elapsed":19,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}}},"source":["import numpy as np"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"joI0npfStWuw","executionInfo":{"status":"ok","timestamp":1707265883946,"user_tz":-420,"elapsed":16,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}}},"source":["def onehot_enc(lbl, min_val=0):\n","  mi = min(lbl)\n","  enc = np.full((len(lbl), max(lbl) - mi + 1), min_val, np.int8)\n","\n","  for i, x in enumerate(lbl):\n","    enc[i, x - mi] = 1\n","\n","  return enc\n","\n","def onehot_dec(enc, mi=0):\n","  return [np.argmax(e) + mi for e in enc]"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"IiNA-erBs8SH","executionInfo":{"status":"ok","timestamp":1707265883948,"user_tz":-420,"elapsed":18,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}}},"source":["def sig(X):\n","  return [1 / (1 + np.exp(-x)) for x in X]\n","\n","def sigd(X):\n","  output = []\n","  for i, x in enumerate(X):\n","    s = sig([x])[0]\n","    output.append(s * (1 - s))\n","  return output"],"execution_count":3,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hihqFCY_ctZ3"},"source":["### Training"]},{"cell_type":"code","source":["# For tracking progress\n","H = {\n","    \"MSE\": [],\n","    \"epoch\": []\n","     }"],"metadata":{"id":"93-qLHtu6M_T","executionInfo":{"status":"ok","timestamp":1707265883948,"user_tz":-420,"elapsed":17,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"pTlk5igwcvc5","executionInfo":{"status":"ok","timestamp":1707265883951,"user_tz":-420,"elapsed":19,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}}},"source":["def bp_fit(X, target, layer_conf, max_epoch, max_error=.1, learn_rate=.1, print_per_epoch=100):\n","  np.random.seed(1)\n","  nin = [np.empty(i) for i in layer_conf]\n","  n = [np.empty(j + 1) if i < len(layer_conf) - 1 else np.empty(j) for i, j in enumerate(layer_conf)]\n","  w = np.array([np.random.rand(layer_conf[i] + 1, layer_conf[i + 1]) for i in range(len(layer_conf) - 1)])\n","  dw = [np.empty((layer_conf[i] + 1, layer_conf[i + 1])) for i in range(len(layer_conf) - 1)]\n","  d = [np.empty(s) for s in layer_conf[1:]]\n","  din = [np.empty(s) for s in layer_conf[1:-1]]\n","  epoch = 0\n","  mse = 1\n","  for i in range(0, len(n)-1):\n","    n[i][-1] = 1\n","  while (max_epoch == -1 or epoch < max_epoch) and mse > max_error:\n","    epoch += 1\n","    mse = 0\n","    for r in range(len(X)):\n","      n[0][:-1] = X[r]\n","      for L in range(1, len(layer_conf)):\n","        nin[L] = np.dot(n[L-1], w[L-1])\n","        n[L][:len(nin[L])] = sig(nin[L])\n","      e = target[r] - n[-1]\n","      mse += sum(e ** 2)\n","      d[-1] = e * sigd(nin[-1])\n","      dw[-1] = learn_rate * d[-1] * n[-2].reshape((-1, 1))\n","      for L in range(len(layer_conf) - 1, 1, -1):\n","        din[L-2] = np.dot(d[L-1], np.transpose(w[L-1][:-1]))\n","\n","        d[L-2] = din[L-2] * np.array(sigd(nin[L-1]))\n","        dw[L-2] = (learn_rate * d[L-2]) * n[L-2].reshape((-1, 1))\n","      w += dw\n","    mse /= len(X)\n","    if print_per_epoch > -1 and epoch % print_per_epoch == 0:\n","      print(f'Epoch {epoch}, MSE: {mse}')\n","      H[\"MSE\"].append(mse)\n","      H[\"epoch\"].append(epoch)\n","\n","  return w, epoch, mse"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"eJA_9btdc3ED"},"source":["### Testing"]},{"cell_type":"code","metadata":{"id":"2zyXIu_ec9go","executionInfo":{"status":"ok","timestamp":1707265883952,"user_tz":-420,"elapsed":18,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}}},"source":["def bp_predict(X, w):\n","  n = [np.empty(len(i)) for i in w]\n","  nin = [np.empty(len(i[0])) for i in w]\n","  predict = []\n","  n.append(np.empty(len(w[-1][0])))\n","  for x in X:\n","    n[0][:-1] = x\n","    for L in range(0, len(w)):\n","      nin[L] = np.dot(n[L], w[L])\n","      n[L + 1][:len(nin[L])] = sig(nin[L])\n","    predict.append(n[-1].copy())\n","  return predict"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"PZxy_M5Jc-ko"},"source":["## Iris Dataset Classification"]},{"cell_type":"code","metadata":{"id":"hw1L_Q3JdHk7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1707265886846,"user_tz":-420,"elapsed":2910,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}},"outputId":"49a75df5-a828-4c8e-e575-e8d1891c0bb3"},"source":["from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import minmax_scale\n","from sklearn.metrics import accuracy_score\n","\n","iris = datasets.load_iris()\n","X = minmax_scale(iris.data)\n","Y = onehot_enc(iris.target)\n","X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=.3,random_state=1)\n","w, ep, mse = bp_fit(X_train, y_train, layer_conf=(4, 3, 3), learn_rate=.1, max_epoch=1000, max_error=.1, print_per_epoch=25)\n","print(f'Epochs: {ep}, MSE: {mse}')\n","\n","predict = bp_predict(X_test, w)\n","predict = onehot_dec(predict)\n","y_test = onehot_dec(y_test)\n","accuracy = accuracy_score(predict, y_test)\n","print('Output:', predict)\n","print('True :', y_test)\n","print('Accuracy:', accuracy)"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-5-5c1ff4ed39d7>:5: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  w = np.array([np.random.rand(layer_conf[i] + 1, layer_conf[i + 1]) for i in range(len(layer_conf) - 1)])\n","<ipython-input-5-5c1ff4ed39d7>:30: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  w += dw\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 25, MSE: 0.4573000553790559\n","Epoch 50, MSE: 0.321272689922169\n","Epoch 75, MSE: 0.2668003450939322\n","Epoch 100, MSE: 0.19045841193641896\n","Epoch 125, MSE: 0.13206064032817524\n","Epoch 150, MSE: 0.10002434429710472\n","Epochs: 151, MSE: 0.09910797309769231\n","Output: [0, 1, 1, 0, 2, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 1, 1, 2, 0, 2, 1, 0, 0, 1, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1]\n","True : [0, 1, 1, 0, 2, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 1, 0, 0, 1, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1]\n","Accuracy: 0.9777777777777777\n"]}]},{"cell_type":"code","source":["import plotly.graph_objects as go\n","\n","fig = go.Figure()\n","\n","fig.add_trace(go.Scatter(y = H['MSE'],\n","                         x = H['epoch'],\n","                         name = 'MSE',\n","                         mode = 'lines',\n","                         line = dict(dash='dot'),\n","                         marker =  dict(color = '#05ad24')))\n","\n","fig.update_xaxes(title = '# Epoch',\n","        range = [0,176],\n","        tickfont = dict(size=15),\n","        tickmode = 'array',\n","        showline = False,\n","        showgrid = False,\n","        ticks = 'outside')\n","\n","fig.update_yaxes(title = 'MSE',\n","        range = [0,1],\n","        tickfont = dict(size=15),\n","        tickmode = 'array',\n","        showline = False,\n","        showgrid = True,\n","        ticks = 'outside')\n","\n","fig.update_layout(width=600,\n","                  title = dict(text = 'MSE on Dataset',\n","                               x = 0.1,\n","                               font = dict(size = 16, color ='#27302a',\n","                               family = 'monospace')),\n","                  plot_bgcolor='#fadcb4',\n","                  paper_bgcolor = '#fadcb4')\n","\n","fig.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":542},"id":"Ql7DR4xy5rB5","executionInfo":{"status":"ok","timestamp":1707265887456,"user_tz":-420,"elapsed":624,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}},"outputId":"894fee5a-7c91-45ff-bada-f7bec79fb82e"},"execution_count":8,"outputs":[{"output_type":"display_data","data":{"text/html":["<html>\n","<head><meta charset=\"utf-8\" /></head>\n","<body>\n","    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n","        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"fa347cef-58c8-4a81-8abd-4ec43726ef41\" class=\"plotly-graph-div\" style=\"height:525px; width:600px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"fa347cef-58c8-4a81-8abd-4ec43726ef41\")) {                    Plotly.newPlot(                        \"fa347cef-58c8-4a81-8abd-4ec43726ef41\",                        [{\"line\":{\"dash\":\"dot\"},\"marker\":{\"color\":\"#05ad24\"},\"mode\":\"lines\",\"name\":\"MSE\",\"x\":[25,50,75,100,125,150],\"y\":[0.4573000553790559,0.321272689922169,0.2668003450939322,0.19045841193641896,0.13206064032817524,0.10002434429710472],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"tickfont\":{\"size\":15},\"title\":{\"text\":\"# Epoch\"},\"range\":[0,176],\"tickmode\":\"array\",\"showline\":false,\"showgrid\":false,\"ticks\":\"outside\"},\"yaxis\":{\"tickfont\":{\"size\":15},\"title\":{\"text\":\"MSE\"},\"range\":[0,1],\"tickmode\":\"array\",\"showline\":false,\"showgrid\":true,\"ticks\":\"outside\"},\"title\":{\"font\":{\"size\":16,\"color\":\"#27302a\",\"family\":\"monospace\"},\"text\":\"MSE on Dataset\",\"x\":0.1},\"width\":600,\"plot_bgcolor\":\"#fadcb4\",\"paper_bgcolor\":\"#fadcb4\"},                        {\"responsive\": true}                    ).then(function(){\n","                            \n","var gd = document.getElementById('fa347cef-58c8-4a81-8abd-4ec43726ef41');\n","var x = new MutationObserver(function (mutations, observer) {{\n","        var display = window.getComputedStyle(gd).display;\n","        if (!display || display === 'none') {{\n","            console.log([gd, 'removed!']);\n","            Plotly.purge(gd);\n","            observer.disconnect();\n","        }}\n","}});\n","\n","// Listen for the removal of the full notebook cells\n","var notebookContainer = gd.closest('#notebook-container');\n","if (notebookContainer) {{\n","    x.observe(notebookContainer, {childList: true});\n","}}\n","\n","// Listen for the clearing of the current output cell\n","var outputEl = gd.closest('.output');\n","if (outputEl) {{\n","    x.observe(outputEl, {childList: true});\n","}}\n","\n","                        })                };                            </script>        </div>\n","</body>\n","</html>"]},"metadata":{}}]},{"cell_type":"markdown","source":["Could be better"],"metadata":{"id":"xq_pDwRnNqHO"}},{"cell_type":"markdown","metadata":{"id":"e6a-SA8LxS2c"},"source":["### Testing Configurations/variables 1"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DKA9FSWzxT8t","executionInfo":{"status":"ok","timestamp":1707265887457,"user_tz":-420,"elapsed":18,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}},"outputId":"504b0e80-44ad-4cf8-8aa5-877e6e1ddae5"},"source":["from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import minmax_scale\n","from sklearn.metrics import accuracy_score\n","\n","iris = datasets.load_iris()\n","X = minmax_scale(iris.data)\n","Y = onehot_enc(iris.target)\n","X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=.3,random_state=1)\n","w, ep, mse = bp_fit(X_train, y_train, layer_conf=(4, 2, 3), learn_rate=.1, max_epoch=100, max_error=.5, print_per_epoch=25)\n","print(f'Epochs: {ep}, MSE: {mse}')\n","predict = bp_predict(X_test, w)\n","predict = onehot_dec(predict)\n","y_test = onehot_dec(y_test)\n","accuracy = accuracy_score(predict, y_test)\n","print('Output:', predict)\n","print('True :', y_test)\n","print('Accuracy:', accuracy)"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-5-5c1ff4ed39d7>:5: VisibleDeprecationWarning:\n","\n","Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","\n","<ipython-input-5-5c1ff4ed39d7>:30: VisibleDeprecationWarning:\n","\n","Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 25, MSE: 0.5587148548510855\n","Epochs: 29, MSE: 0.49569003845261594\n","Output: [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n","True : [0, 1, 1, 0, 2, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 1, 0, 0, 1, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1]\n","Accuracy: 0.28888888888888886\n"]}]},{"cell_type":"markdown","source":["Underfit"],"metadata":{"id":"1r0W7SpCNoAD"}},{"cell_type":"markdown","metadata":{"id":"-8Tcmo9MxU4T"},"source":["### Testing Configurations/variables 2"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"84agkkb0xVf3","executionInfo":{"status":"ok","timestamp":1707265909093,"user_tz":-420,"elapsed":21648,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}},"outputId":"ff67a8a5-c1db-46c7-c5ff-1b1ede188045"},"source":["from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import minmax_scale\n","from sklearn.metrics import accuracy_score\n","\n","iris = datasets.load_iris()\n","X = minmax_scale(iris.data)\n","Y = onehot_enc(iris.target)\n","X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=.3,random_state=1)\n","w, ep, mse = bp_fit(X_train, y_train, layer_conf=(4, 25, 3), learn_rate=.1, max_epoch=500, max_error=.01, print_per_epoch=25)\n","print(f'Epochs: {ep}, MSE: {mse}')\n","predict = bp_predict(X_test, w)\n","predict = onehot_dec(predict)\n","y_test = onehot_dec(y_test)\n","accuracy = accuracy_score(predict, y_test)\n","print('Output:', predict)\n","print('True :', y_test)\n","print('Accuracy:', accuracy)"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-5-5c1ff4ed39d7>:5: VisibleDeprecationWarning:\n","\n","Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","\n","<ipython-input-5-5c1ff4ed39d7>:30: VisibleDeprecationWarning:\n","\n","Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 25, MSE: 1.9997475602526067\n","Epoch 50, MSE: 1.9996839107720699\n","Epoch 75, MSE: 1.9995729256252905\n","Epoch 100, MSE: 1.9993234166160632\n","Epoch 125, MSE: 1.998004842894972\n","Epoch 150, MSE: 1.5034310711672474\n","Epoch 175, MSE: 0.9882734055300789\n","Epoch 200, MSE: 0.9358385629366138\n","Epoch 225, MSE: 0.8962403847767554\n","Epoch 250, MSE: 0.5720113088188044\n","Epoch 275, MSE: 0.1718964155883048\n","Epoch 300, MSE: 0.13551945448567226\n","Epoch 325, MSE: 0.10976277201695424\n","Epoch 350, MSE: 0.09159154648169049\n","Epoch 375, MSE: 0.07929291362007068\n","Epoch 400, MSE: 0.07095077966556529\n","Epoch 425, MSE: 0.06511610472051664\n","Epoch 450, MSE: 0.06088086243803241\n","Epoch 475, MSE: 0.05769828099112584\n","Epoch 500, MSE: 0.05523313404391771\n","Epochs: 500, MSE: 0.05523313404391771\n","Output: [0, 1, 1, 0, 2, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 1, 1, 2, 0, 2, 1, 0, 0, 1, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1]\n","True : [0, 1, 1, 0, 2, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 1, 0, 0, 1, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1]\n","Accuracy: 0.9777777777777777\n"]}]},{"cell_type":"markdown","metadata":{"id":"ItGOtS98xWWL"},"source":["### Testing Configurations/variables 3"]},{"cell_type":"code","metadata":{"id":"soiQ3ZZzxXXV","executionInfo":{"status":"ok","timestamp":1707265918223,"user_tz":-420,"elapsed":9146,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5cb2ce41-656c-4fc0-f5cd-a5910a416fd3"},"source":["from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import minmax_scale\n","from sklearn.metrics import accuracy_score\n","\n","iris = datasets.load_iris()\n","X = minmax_scale(iris.data)\n","Y = onehot_enc(iris.target)\n","X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=.3,random_state=1)\n","w, ep, mse = bp_fit(X_train, y_train, layer_conf=(4, 3, 3), learn_rate=.1, max_epoch=1000, max_error=.01, print_per_epoch=100)\n","print(f'Epochs: {ep}, MSE: {mse}')\n","predict = bp_predict(X_test, w)\n","predict = onehot_dec(predict)\n","y_test = onehot_dec(y_test)\n","accuracy = accuracy_score(predict, y_test)\n","print('Output:', predict)\n","print('True :', y_test)\n","print('Accuracy:', accuracy)"],"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-5-5c1ff4ed39d7>:5: VisibleDeprecationWarning:\n","\n","Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","\n","<ipython-input-5-5c1ff4ed39d7>:30: VisibleDeprecationWarning:\n","\n","Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 100, MSE: 0.19045841193641896\n","Epoch 200, MSE: 0.0719103957501553\n","Epoch 300, MSE: 0.05477329557645177\n","Epoch 400, MSE: 0.04868920708563232\n","Epoch 500, MSE: 0.045524867554281694\n","Epoch 600, MSE: 0.04362905088225508\n","Epoch 700, MSE: 0.04241256560334686\n","Epoch 800, MSE: 0.04159465036603972\n","Epoch 900, MSE: 0.04102273137630647\n","Epoch 1000, MSE: 0.04060833596607481\n","Epochs: 1000, MSE: 0.04060833596607481\n","Output: [0, 1, 1, 0, 2, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 1, 0, 0, 1, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1]\n","True : [0, 1, 1, 0, 2, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 1, 0, 0, 1, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1]\n","Accuracy: 1.0\n"]}]},{"cell_type":"markdown","metadata":{"id":"fz726I9FgKWi"},"source":["### Testing Configurations/variables 4"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PQMtugLRgJts","executionInfo":{"status":"ok","timestamp":1707265918224,"user_tz":-420,"elapsed":22,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","userId":"05200239798361815565"}},"outputId":"a483faa7-3e76-4b59-a998-26669c6b8450"},"source":["from sklearn import datasets\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import minmax_scale\n","from sklearn.metrics import accuracy_score\n","import time\n","\n","start_time = time.time()\n","\n","iris = datasets.load_iris()\n","X = minmax_scale(iris.data)\n","Y = onehot_enc(iris.target)\n","X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=.3,random_state=1)\n","w, ep, mse = bp_fit(X_train, y_train, layer_conf=(4, 3, 3), learn_rate=.1, max_epoch=100, max_error=.5, print_per_epoch=25)\n","print(f'Epochs: {ep}, MSE: {mse}')\n","predict = bp_predict(X_test, w)\n","predict = onehot_dec(predict)\n","y_test = onehot_dec(y_test)\n","accuracy = accuracy_score(predict, y_test)\n","print('Output:', predict)\n","print('True :', y_test)\n","print('Accuracy:', accuracy)\n","\n","execution = time.time() - start_time\n","print(\"Waktu eksekusi: %s detik\" % execution)"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Epochs: 23, MSE: 0.4858416685844551\n","Output: [0, 2, 2, 0, 2, 2, 2, 0, 0, 2, 2, 0, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 2, 2, 2, 0, 2, 2, 2]\n","True : [0, 1, 1, 0, 2, 1, 2, 0, 0, 2, 1, 0, 2, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 1, 0, 0, 1, 2, 1, 2, 1, 2, 2, 0, 1, 0, 1, 2, 2, 0, 2, 2, 1]\n","Accuracy: 0.6\n","Waktu eksekusi: 0.18921923637390137 detik\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-5-5c1ff4ed39d7>:5: VisibleDeprecationWarning:\n","\n","Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","\n","<ipython-input-5-5c1ff4ed39d7>:30: VisibleDeprecationWarning:\n","\n","Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","\n"]}]},{"cell_type":"markdown","source":["Underfit"],"metadata":{"id":"_zaIkAVfNkM-"}}]}