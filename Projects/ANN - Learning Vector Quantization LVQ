{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1ro--QHByUI88FQri-t3hsJHxqTPdn0dv","timestamp":1635670738645}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"FKmHk-FbKDWe"},"source":["# Bab 7 Learning Vector Quantization"]},{"cell_type":"markdown","metadata":{"id":"ewAbtN39KDGN"},"source":["## Function"]},{"cell_type":"markdown","metadata":{"id":"B-d5r_PjKGb2"},"source":["### LVQ Training"]},{"cell_type":"code","metadata":{"id":"YPq3_74LJ8lA"},"source":["import numpy as np\n","\n","def lvq_fit(train, target, lrate, b, max_epoch):\n","  label, train_idx = np.unique(target, return_index=True)\n","  weight = train[train_idx].astype(np.float64)\n","  train = np.array([e for i, e in enumerate(zip(train, target)) if i not in train_idx])\n","  train, target = train[:, 0], train[:, 1]\n","  epoch = 0\n","\n","  while epoch < max_epoch:\n","    for i, x in enumerate(train):\n","      distance = [sum((w - x) ** 2) for w in weight]\n","      min = np.argmin(distance)\n","      sign = 1 if target[i] == label[min] else -1\n","      weight[min] += sign * lrate * (x - weight[min])\n","\n","    lrate *= b\n","    epoch += 1\n","\n","  return weight, label"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0i3Wu52SKVlI"},"source":["### Testing"]},{"cell_type":"code","metadata":{"id":"ogz8RQ0JKZkn"},"source":["def lvq_predict(X, model):\n","  center, label = model\n","  Y = []\n","  for x in X:\n","    d = [sum((c - x) ** 2) for c in center]\n","    Y.append(label[np.argmin(d)])\n","  return Y"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bgf87iLclSRy"},"source":["### Calculate Accuracy"]},{"cell_type":"code","metadata":{"id":"Et-YE6WclSqQ"},"source":["def calc_accuracy(a, b):\n","  s = [1 if a[i] == b[i] else 0 for i in range(len(a))]\n","  return sum(s) / len(a)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aazmHIl6KeFu"},"source":["### Using LVQ"]},{"cell_type":"code","metadata":{"id":"vcbWhRy7Kqiy","colab":{"base_uri":"https://localhost:8080/","height":340},"executionInfo":{"status":"ok","timestamp":1635676624722,"user_tz":-420,"elapsed":386,"user":{"displayName":"Mohammad Alfiano Rizky Mahardika","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"05200239798361815565"}},"outputId":"743e5d2f-eb1e-4d58-fee0-7da959d31b9d"},"source":["from random import uniform\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","from sklearn.datasets import make_blobs, make_classification\n","\n","X, y = make_classification(n_samples=31, n_features=2, n_redundant=0, n_informative=2, n_classes=3, n_clusters_per_class=1)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n","model = lvq_fit(X_train, y_train, lrate=.5, b=.8, max_epoch=50)\n","output = lvq_predict(X_test, model)\n","accuracy = calc_accuracy(output, y_test)\n","colors = 'rgbcmyk'\n","print('Accuracy:', accuracy)\n","\n","for x, label in zip(X_train, y_train):\n","  plt.plot(x[0], x[1], colors[label] + '.')\n","for center, label in zip(model[0], model[1]):\n","  plt.plot(center[0], center[1], colors[label] + 'o')\n","for x, label in zip(X_test, output):\n","  plt.plot(x[0], x[1], colors[label] + 'x')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:6: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \n"]},{"output_type":"stream","name":"stdout","text":["Accuracy: 0.8571428571428571\n"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]}]}